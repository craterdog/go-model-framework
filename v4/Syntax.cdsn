!>
................................................................................
.    Copyright (c) 2009-2024 Crater Dog Technologies.  All Rights Reserved.    .
................................................................................
.  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.               .
.                                                                              .
.  This code is free software; you can redistribute it and/or modify it under  .
.  the terms of The MIT License (MIT), as published by the Open Source         .
.  Initiative. (See https://opensource.org/license/MIT)                        .
................................................................................
<!

!>
GO CLASS MODEL NOTATION
This document contains a formal definition of the Go Class Model Notation™
(GCMN) using Crater Dog Syntax Notation™ (CDSN):
 * https://github.com/craterdog/go-grammar-framework/blob/main/v4/cdsn/Syntax.cdsn

A language syntax consists of a set of rule definitions and lexigram
definitions.

The following intrinsic character types are context specific:
 * ANY - Any language specific character.
 * LOWER - Any language specific lowercase character.
 * UPPER - Any language specific uppercase character.
 * DIGIT - Any language specific digit.
 * ESCAPE - Any environment specific escape sequence.
 * CONTROL - Any environment specific (non-printable) control character.
 * EOL - The environment specific end-of-line character.
 * EOF - The environment specific end-of-file marker (pseudo character).

A predicate may be constrained by any of the following cardinalities:
 * predicate{M} - Exactly M instances of the specified predicate.
 * predicate{M..N} - M to N instances of the specified predicate.
 * predicate{M..} - M or more instances of the specified predicate.
 * predicate? - Zero or one instances of the specified predicate.
 * predicate* - Zero or more instances of the specified predicate.
 * predicate+ - One or more instances of the specified predicate.

A negation "~" within a lexigram definition may only be applied to a bounded
range of possible intrinsic character types or printable unicode characters
called runes.
<!

!>
RULE DEFINITIONS
The following rules are used by the parser when parsing the stream of tokens
generated by the scanner based on the lexigram definitions.  Each rule name
begins with an uppercase letter.  The rule definitions may specify the names of
lexigrams or other rules and are matched by the parser in the order listed.  A
rule definition may also be directly or indirectly recursive.  The parsing of
tokens is greedy and will match as many repeated token types as possible. The
sequence of factors within in a rule definition may be separated by spaces which
are ignored by the parser.
<!
Model: Notice Header Modules? Types? Functionals? Aspects? Classes? Instances? EOL* EOF  ! Terminated with an end-of-file marker.

Notice: comment

Header: EOL comment "package" identifier EOL

Modules: EOL "import" "(" Module* EOL ")" EOL

Module: EOL identifier text

Types: EOL note EOL Type+ EOL

Type: EOL Declaration Abstraction Enumeration? EOL

Declaration: comment "type" identifier GenericParameters?

GenericParameters: "[" Parameters "]"

Parameters: Parameter AdditionalParameters?

AdditionalParameters: "," AdditionalParameter+ EOL

AdditionalParameter: EOL Parameter ","

Parameter: identifier Abstraction

Abstraction: Prefix? identifier GenericArguments?

Prefix:
    Array
    Map
    Channel
    Alias

Array: "[" "]"

Map: "map" "[" identifier "]"

Channel: "chan"

Alias: identifier "."

GenericArguments: "[" Arguments "]"

Arguments: Argument AdditionalArguments?

AdditionalArguments: "," AdditionalArgument+ EOL

AdditionalArgument: EOL Argument ","

Argument: Abstraction

Enumeration: EOL "const" "(" Value AdditionalValue+ EOL ")"

Value: EOL identifier Abstraction "=" "iota"

AdditionalValue: EOL identifier

Functionals: EOL note EOL Functional+ EOL

Functional: EOL Declaration "func" "(" Parameters? ")" Result EOL

Result:
    Abstraction
    Parameterized

Parameterized: "(" Parameters ")"

Aspects: EOL note EOL Aspect+ EOL

Aspect: EOL Declaration "interface" "{" Methods "}" EOL

Classes: EOL note EOL Class+ EOL

Class: EOL Declaration "interface" "{" Constants? Constructors? Functions? "}" EOL

Constants: EOL note Constant+

Constant: EOL identifier "(" ")" Abstraction

Constructors: EOL note Constructor+

Constructor: EOL identifier "(" Parameters? ")" Abstraction

Functions: EOL note Function+

Function: EOL identifier "(" Parameters? ")" Result

Instances: EOL note EOL Instance+ EOL

Instance: EOL Declaration "interface" "{" Attributes? Abstractions? Methods? "}" EOL

Attributes: EOL note Attribute+

Attribute: EOL identifier "(" Parameter? ")" Abstraction?

Abstractions: EOL note Abstraction+

Methods: EOL note Method+

Method: EOL identifier "(" Parameters? ")" Result?

!>
LEXIGRAM DEFINITIONS
The following lexigram definitions are used by the scanner to generate the
stream of tokens—each an instance of a lexigram type—that are to be processed by
the parser.  Each lexigram name begins with a lowercase letter.  Unlike with
rule definitions, a lexigram definition cannot specify the name of a rule within
its definition, but it may specify the name of another lexigram.  Lexigram
definitions cannot be recursive and the scanning of lexigrams is NOT greedy.
Any spaces within a lexigram definition are part of the lexigram and are NOT
ignored.
<!
comment: "/*" ANY* "*/" EOL  ! Chooses the shortest possible match.

delimiter: "[" | "]" | "(" | ")" | "{" | "}" | "." | "," | "="

identifier: (LOWER | UPPER) (LOWER | UPPER | DIGIT)*

note: "//" ~[CONTROL]*

text: '"' ANY* '"'  ! Chooses the shortest possible match.

