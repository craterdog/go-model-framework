!>
................................................................................
.    Copyright (c) 2009-2024 Crater Dog Technologies.  All Rights Reserved.    .
................................................................................
.  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.               .
.                                                                              .
.  This code is free software; you can redistribute it and/or modify it under  .
.  the terms of The MIT License (MIT), as published by the Open Source         .
.  Initiative. (See https://opensource.org/license/MIT)                        .
................................................................................
<!

!>
GO CLASS MODEL NOTATION
This document contains a formal definition of the Go Class Model Notation™
(GCMN) using Crater Dog Syntax Notation™ (CDSN):
 * https://github.com/craterdog/go-grammar-framework/blob/main/v4/cdsn/Syntax.cdsn

A language syntax consists of a set of rule definitions and expression patterns.

The following intrinsic character types are context specific:
 * ANY - Any language specific character.
 * LOWER - Any language specific lowercase character.
 * UPPER - Any language specific uppercase character.
 * DIGIT - Any language specific digit.
 * CONTROL - Any environment specific (non-printable) control character.
 * EOL - The environment specific end-of-line character.
 * EOF - The environment specific end-of-file marker (pseudo character).

A predicate may be constrained by any of the following cardinalities:
 * predicate{M} - Exactly M instances of the specified predicate.
 * predicate{M..N} - M to N instances of the specified predicate.
 * predicate{M..} - M or more instances of the specified predicate.
 * predicate? - Zero or one instances of the specified predicate.
 * predicate* - Zero or more instances of the specified predicate.
 * predicate+ - One or more instances of the specified predicate.

A negation "~" within a regular expression pattern may only be applied to a
bounded range of possible intrinsic character types or printable unicode
characters called runes.
<!

!>
RULE DEFINITIONS
The following rules are used by the parser when parsing the stream of tokens
generated by the scanner based on the expression patterns.  Each rule name
begins with an uppercase letter.  The rule definitions may specify the names of
expressions or other rules and are matched by the parser in the order listed.  A
rule definition may also be directly or indirectly recursive.  The parsing of
tokens is greedy and will match as many repeated token types as possible. The
sequence of factors within in a rule definition may be separated by spaces which
are ignored by the parser.
<!
Model: Notice Header Imports? Types? Functionals? Classes Instances Aspects? EOF

Notice: comment

Header: comment "package" name

Imports: "import" "(" Modules ")"

Modules: Module+

Module: name path

Types: note Type+

Type: Declaration Abstraction Enumeration?

Declaration: comment "type" name GenericParameters?

GenericParameters: "[" Parameters "]"

Parameters: Parameter AdditionalParameter* ","?

Parameter: name Abstraction

AdditionalParameter: "," Parameter

Abstraction: Prefix? Alias? name GenericArguments?

Prefix:
    Array
    Map
    Channel

Array: "[" "]"

Map: "map" "[" name "]"

Channel: "chan"

Alias: name "."

GenericArguments: "[" Arguments "]"

Arguments: Argument AdditionalArgument*

Argument: Abstraction

AdditionalArgument: "," Argument

Enumeration: "const" "(" Values ")"

Values: Value AdditionalValue*

Value: name Abstraction "=" "iota"

AdditionalValue: name

Functionals: note Functional+

Functional: Declaration "func" "(" Parameters? ")" Result

Result:
    Abstraction
    Parameterized

Parameterized: "(" Parameters ")"

Classes: note Class+

Class: Declaration "interface" "{" Constructors Constants? Functions? "}"

Constructors: note Constructor+

Constructor: name "(" Parameters? ")" Abstraction

Constants: note Constant+

Constant: name "(" ")" Abstraction

Functions: note Function+

Function: name "(" Parameters? ")" Result

Instances: note Instance+

Instance: Declaration "interface" "{" Attributes Abstractions? Methods? "}"

Attributes: note Attribute+

Attribute: name "(" Parameter? ")" Abstraction?

Abstractions: note Abstraction+

Methods: note Method+

Method: name "(" Parameters? ")" Result?

Aspects: note Aspect+

Aspect: Declaration "interface" "{" Method+ "}"

!>
REGULAR EXPRESSION PATTERNS
The following regular expression patterns are used by the scanner to generate
a stream of tokens—each a match of a regular expression—that are to be processed
by the parser.  Each regular expression name begins with a lowercase letter.
Unlike rule definitions, a regular expression pattern cannot specify the name of
a rule within its pattern—but it may specify the name of another regular
expression.  Regular expression patterns cannot be recursive and the scanning of
patterns is NOT greedy.  Any spaces within a regular expression pattern are part
of the regular expression and are NOT ignored.
<!
comment: "/*" EOL (ANY | EOL)* EOL "*/" EOL  ! Chooses the shortest possible match.

delimiter: "[" | "]" | "(" | ")" | "{" | "}" | "." | "," | "="

name: (LOWER | UPPER) (LOWER | UPPER | DIGIT)* "_"?

note: "//" ~[CONTROL]*

path: '"' ANY* '"'  ! Chooses the shortest possible match.

